'''

		### RSA Implementation Demonstration with GUI ###

		Author : Abhishek Iyengar
		GitHub : @tinshade
		License : MIT
		Description : 
		This is just a basic, ugly version of RSA implementation using Python 3.7.
		I made this as a mini-project for my academic needs.
		Feel free to modify and re-distribute the code but do give me credits :)

		A more 'polished' and 'good-looking' version is in the Electron JS repository,
		made with Electron JS and Python.
		CHECK IT OUT!

'''

#For the GUI
from tkinter import * 
#For RSA Cryptography
from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP
import ast #To encode litreal values from encrypted text.


window = Tk() #Initializing TKInter in the window variable
window.title("RSA Implementation") #Title of the window
window.geometry('350x200') #WxH of the window
#Instruction Label & Position
lbl = Label(window, text="Enter plain text for encryption or file name for decryption")
lbl.grid(column=0, row=0)
#Text field & Position
txt = Entry(window,width=10)
txt.grid(column=0, row=1)
#Output Label & Position
lblout = Label(window,text = "")
lblout.grid(column=0, row=5)

#Global variables to be used in enc and dec functions
key = RSA.generate(1048) #Generating a 1024 bit key
private_key = key.export_key('PEM') #Exporting the private key
public_key = key.publickey().exportKey('PEM') #Exporting the public key

#RSA Encrypt Function
def enc():
    pt = txt.get() #Getting the value in the text box
    message = str.encode(pt)
    rsa_public_key = RSA.importKey(public_key)
    rsa_public_key = PKCS1_OAEP.new(rsa_public_key)
    encrypted_text = rsa_public_key.encrypt(message)
    #Writing the encrypted text to a file
    ##NOTE: Change this to current time in seconds to avoid overwriting##
    with open('output.txt', 'w+') as file:
    	file.write(str(encrypted_text))
    	file.close()
    lblout.configure(text= "Your output has been saved!") #Display success message

#RSA Decrypt Function
def dec():
	#Opening the file with name specified in the textbox
	with open(txt.get(), 'r') as file:
		content = file.read() #Storing the contents of the text file in content variable
		#Grabbing the private and public keys generated by the globals
		rsa_private_key = RSA.importKey(private_key)
		rsa_private_key = PKCS1_OAEP.new(rsa_private_key)
		#Using ast.literal_eval to get the actual value of the encryption from the file
		decrypted_text = rsa_private_key.decrypt(ast.literal_eval(content))
		lblout.configure(text = decrypted_text) #Showing success message as the decryption string
		#Writing the decryption string output in a file
		with open('decryption'+txt.get()+'.txt', 'w+') as f:
			f.write(str(decrypted_text))
			f.close()

#Buttons for encryption and decryption with positions
btnenc = Button(window, text="Encrypt", command=enc) 
btnenc.grid(column=0, row=2)
btndec = Button(window, text="Decrypt", command=dec) 
btndec.grid(column=0, row=3)

#Looping to get a constant window from TKInter
window.mainloop()